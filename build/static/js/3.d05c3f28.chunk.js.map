{"version":3,"sources":["components/quotes/QuoteItem.js","components/quotes/QuoteItem.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","pages/detail.js"],"names":["QuoteItem","props","useState","item","setItem","redirect","setRedirect","useEffect","console","log","className","classes","to","id","text","author","hideBtn","onClick","module","exports","NewCommentForm","commentTextRef","useRef","dispatch","useDispatch","submitFormHandler","event","preventDefault","value","current","key","length","postCommentDB","comment","path","form","onSubmit","control","htmlFor","rows","ref","actions","CommentItem","randomString","require","CommentsList","comments","map","generate","Detail","quote","setQuote","route","useLocation","state","useSelector","i","quotes","filter","pathname"],"mappings":"6LAgCeA,IA5BG,SAACC,GACjB,MAAwBC,mBAASD,GAAjC,mBAAOE,EAAP,KAAaC,EAAb,KACA,EAAgCF,oBAAS,GAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KAQA,OAJFC,qBAAU,WACRH,EAAQH,KACP,CAACA,IACFO,QAAQC,IAAIN,GAEV,qBAAIO,UAAWC,IAAQR,KAAvB,UACGE,GAAY,cAAC,IAAD,CAAUO,GAAI,SAAWX,EAAMY,KAC5C,mCACE,qCACE,4BAAIV,EAAKW,SAEX,qCAAaX,EAAKY,YAEnBZ,EAAKa,QAAU,KACd,mBAAGN,UAAU,MAAMO,QAjBzB,WACEX,GAAY,IAgBR,kC,mBCvBRY,EAAOC,QAAU,CAAC,KAAO,0B,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,6BAA6B,QAAU,gCAAgC,QAAU,gCAAgC,QAAU,kC,mBCApJD,EAAOC,QAAU,CAAC,KAAO,4B,mBCAzBD,EAAOC,QAAU,CAAC,SAAW,iC,yJCgCdC,EA1BQ,SAACnB,GACtB,IAAMoB,EAAiBC,mBACjBC,EAAWC,cACXC,EAAoB,SAACC,GACzBA,EAAMC,iBACN,IAAIC,EAAQP,EAAeQ,QAAQD,MACnCpB,QAAQC,IAAIR,EAAM6B,KACG,IAAjBF,EAAMG,QACRR,EAASS,YAAc,CAACC,QAASL,EAAOM,KAAMjC,EAAMY,OAKxD,OACE,uBAAMH,UAAWC,IAAQwB,KAAMC,SAAUX,EAAzC,UACE,sBAAKf,UAAWC,IAAQ0B,QAASD,SAAUX,EAA3C,UACE,uBAAOa,QAAQ,UAAf,0BACA,0BAAUzB,GAAG,UAAU0B,KAAK,IAAIC,IAAKnB,OAEvC,qBAAKX,UAAWC,IAAQ8B,QAAxB,SACE,wBAAQ/B,UAAU,MAAlB,+B,iBCjBOgC,EARK,SAACzC,GACnB,OACE,oBAAIS,UAAWC,IAAQR,KAAvB,SACE,4BAAIF,EAAMa,U,iBCHZ6B,EAAeC,EAAQ,IAWZC,EAVM,SAAC5C,GACpB,OACE,oBAAIS,UAAWC,IAAQmC,SAAvB,SACG7C,EAAM6C,SAASC,KAAI,SAACd,GAAD,OAClB,cAAC,EAAD,CAA4CnB,KAAMmB,GAAhCU,EAAaK,SAAS,UCAjC,SAASC,IACtB,MAA0B/C,mBAAS,CACjC4B,IAAK,OACLjB,GAAI,OACJE,OAAQ,GACRD,KAAM,GACNgC,SAAU,CAAC,OALb,mBAAOI,EAAP,KAAcC,EAAd,KAOMC,EAAQC,cACRC,EAAQC,aAAY,SAACD,GACzB,OAAOA,EAAMJ,SAwBf,OAtBA3C,qBAAU,WACR,GAAI+C,EAAO,CACT,IAAIE,EAAIF,EAAMG,OAAOC,QAAO,SAACvD,GAC3B,GAAI,UAAYA,EAAKU,IAAMuC,EAAMO,SAI/B,OAHAR,EAAShD,GACTK,QAAQC,IAAIN,GACZqD,EAAI,EACGrD,KAIK,GAAZqD,EAAEzB,QACJoB,GAAS,WAAM,MAAO,CACpBrB,IAAK,OACLjB,GAAI,OACJE,OAAQ,6CACRD,KAAM,0BAKX,CAACwC,EAAOF,IAET,qCACE,4BAAIA,EAAMO,WACV,cAAC3D,EAAA,EAAD,CAEEa,GAAIqC,EAAMrC,GACVE,OAAQmC,EAAMnC,OACdD,KAAMoC,EAAMpC,KACZE,SAAW,GAJNkC,EAAMrC,IAMZqC,EAAMJ,SAAU,cAAC,EAAD,CAAcA,SAAUI,EAAMJ,WAAa,KAC5D,cAAC,EAAD,CAAgBjC,GAAIqC,EAAMrC,GAAIuC,MAAOA,EAAMO","file":"static/js/3.d05c3f28.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport classes from \"./QuoteItem.module.css\";\nconst QuoteItem = (props) => {\n  const [item, setItem] = useState(props);\n  const [redirect, setRedirect] = useState(false);\n  function handleClick() {\n    setRedirect(true);\n  }\nuseEffect(()=> {\n  setItem(props)\n}, [props])\n  console.log(item);\n  return (\n    <li className={classes.item}>\n      {redirect && <Redirect to={\"quote/\" + props.id} />}\n      <figure>\n        <blockquote>\n          <p>{item.text}</p>\n        </blockquote>\n        <figcaption>{item.author}</figcaption>\n      </figure>\n      {item.hideBtn ? null : (\n        <a className=\"btn\" onClick={handleClick}>\n          View Fullscreen\n        </a>\n      )}\n    </li>\n  );\n};\n\nexport default QuoteItem;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"QuoteItem_item__j6u6q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__1RdZi\",\"loading\":\"NewCommentForm_loading__3ScIm\",\"control\":\"NewCommentForm_control__3y_nh\",\"actions\":\"NewCommentForm_actions__3h4D9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item___bUwv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__3JQJ3\"};","import { current } from '@reduxjs/toolkit';\nimport { useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { postCommentDB } from '../../store/quote';\n\nimport classes from './NewCommentForm.module.css';\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n  const dispatch = useDispatch()\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n    let value = commentTextRef.current.value\n    console.log(props.key);\n    if (value.length !== 0 || undefined || null) {\n      dispatch(postCommentDB({comment: value, path: props.id}))\n    }\n    // send comment to server\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\nvar randomString = require(\"randomstring\")\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={randomString.generate(5)} text={comment} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import QuoteItem from \"../components/quotes/QuoteItem\";\r\nimport Routes, { Route, useLocation, useLocations } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useEffect, useState } from \"react\";\r\nimport NewCommentForm from \"../components/comments/NewCommentForm\"\r\nimport CommentItem from \"../components/comments/CommentItem\"\r\nimport CommentsList from \"../components/comments/CommentsList\"\r\nexport default function Detail() {\r\n  const [quote, setQuote] = useState({\r\n    key: \"fufu\",\r\n    id: \"fake\",\r\n    author: \"\",\r\n    text: \"\",\r\n    comments: [\"a\"]\r\n  });\r\n  const route = useLocation();\r\n  const state = useSelector((state) => {\r\n    return state.quote;\r\n  });\r\n  useEffect(() => {\r\n    if (state) {\r\n      var i = state.quotes.filter((item) => {\r\n        if (\"/quote/\" + item.id == route.pathname) {\r\n          setQuote(item);\r\n          console.log(item);\r\n          i = 1;\r\n          return item;\r\n        } else {\r\n        }\r\n      });\r\n      if (i.length == 0) {\r\n        setQuote(()=> {return {\r\n          key: \"fufu\",\r\n          id: \"fake\",\r\n          author: \"It may be deleted or you have invalid link\",\r\n          text: \"Quote not found!\",\r\n        }});\r\n      }\r\n      \r\n    }\r\n  }, [state, route]);\r\n  return (\r\n    <>\r\n      <p>{route.pathname}</p>\r\n      <QuoteItem\r\n        key={quote.id}\r\n        id={quote.id}\r\n        author={quote.author}\r\n        text={quote.text}\r\n        hideBtn = {true}\r\n      />\r\n      {quote.comments ?<CommentsList comments={quote.comments}/>: null}\r\n      <NewCommentForm id={quote.id} route={route.pathname}/>\r\n    </>\r\n  );\r\n}\r\n/* key={quote.id}\r\n            id={quote.id}\r\n            author={quote.author}\r\n            text={quote.text}\r\n            path={props.path}  const state = useSelector((state) => {\r\n    return state.quote;\r\n  });\r\n\r\n  if (props.path && item.path) {\r\n    var result = state.quotes.map((quote) => {\r\n      if (props.path === quote.id) {\r\n        setItem(()=> {return quote});\r\n        return quote;\r\n      }\r\n\r\n      setItem(result)\r\n    });\r\n  }*/\r\n"],"sourceRoot":""}